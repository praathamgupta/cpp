#include <bits/stdc++.h>

using namespace std;

int findNumberOfLIS(vector<int> nums)
{
    if (nums.size() == 0)
        return 0;

    int n = nums.size();

    vector<int> dp_l(n, 1);
    vector<int> dp_c(n, 1);

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < i; j++)
        {
            if (nums[i] <= nums[j])
                continue;

            if (dp_l[j] + 1 > dp_l[i])
            {
                dp_l[i] = dp_l[j] + 1;
                dp_c[i] = dp_c[j];
            }
            else if (dp_l[j] + 1 == dp_l[i])
                dp_c[i] += dp_c[j];
        }
    }

    int max_length = 0;

    for (int i : dp_l)
        max_length = max(i, max_length);

    int count = 0;

    for (int i = 0; i < n; i++)
    {
        if (dp_l[i] == max_length)
            count += dp_c[i];
    }

    return count;
}

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;
        vector<int> arr(n);
        for (int i = 0; i < n; i++)
        {
            cin >> arr[i];
        }
        // Function Call
        cout << findNumberOfLIS(arr) << endl;
    }
    return 0;
}
