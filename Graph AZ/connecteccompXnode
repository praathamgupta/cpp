// size of the connected component with node x
#include <bits/stdc++.h>
using namespace std;
int n, m, q;
vector<vector<int>> g;
vector<int> vis;
void dfs(int node, int comp)
{
    vis[node] = comp;
    for (auto v : g[node])
    {
        if (!vis[v])
        {
            dfs(v, comp);
        }
    }
}
void solve()
{
    cin >> n >> m >> q;
    g.resize(n + 1);
    vis.assign(n + 1, 0);
    for (int i = 0; i < m; i++)
    {
        int a, b;
        cin >> a >> b;
    }
    if (a == b)
    {
        g[a].push_back(b);
    }
    else
    {
        g[a].push_back(b);
        g[b].push_back(a);
    }
    int num_comp = 0;
    for (int i = 1; i <= n; i++)
    {
        if (!vis[i])
        {
            num_comp++;
            dfs(i, num_comp);
        }
    }
    vector<int> num_of_edge(num_comp + 1, 0);
    for (int i = 1; i <= n; i++)
    {
        num_of_edge[vis[i]]++;
    }
    while (q--)
    {
        int y;
        cin >> y;
        cout << num_of_edge[vis[y]];
    }
}